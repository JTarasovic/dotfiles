{{- /*
# vi: ft=gotmpl
*/ -}}
watch_url() {
    while :; do
        curl -s -o /dev/null -w "%{http_code} - %{size_download}\n" --connect-timeout 2 -k "$1"
        sleep "${2:-5}"
    done
}

# e.g. curl -so /dev/null https://www.google.com/ -w "$(curl_time)"
curl_time() {
    printf '
time_nslookup:      %%{time_namelookup} s
time_connect:       %%{time_connect} s
time_appconnect:    %%{time_appconnect} s
time_pretransfer:   %%{time_pretransfer} s
time_redirect:      %%{time_redirect} s
time_starttransfer: %%{time_starttransfer} s
                    ----------
time_total:         %%{time_total} s\\n'
}

clear_terminal_title() {
    printf "\e]2;Alacritty\a"
}

{{ if lookPath "git" -}}
fixup() {
    git commit $1 --fixup=@ && git rebase -i @~2
}

get_default_branch() {
    git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4
}

clean() {
    set -e
    [[ -z ${TRACE:-""} ]] || set -x
    local old
    local br

    old=$(git rev-parse --abbrev-ref HEAD)
    br=$(get_default_branch)

    git fetch --prune origin
    git checkout "${1:-$br}" || {
        echo "couldn't check out branch!"
        return
    }
    git rebase || {
        echo "couldn't rebase!"
        return
    }
    git br -D "$old"
    git gc --prune=now
    set +e
}

# https://stackoverflow.com/questions/1029969/why-is-my-git-repository-so-big
git-fatfiles() {
    git rev-list --all --objects \
        | sed -n $(git rev-list --objects --all \
            | cut -f1 -d' ' \
            | git cat-file --batch-check \
            | grep blob \
            | sort -n -k 3 \
            | tail -n40 \
            | while read -r hash _type size; do
                printf "-e s/%s/%s/p " "$hash" "$size"
            done) \
        | sort -nr -k1
}
{{- else -}}
# git functions omitted
{{- end }}

{{ if lookPath "aws" -}}
cf_validate() {
    aws cloudformation validate-template --template-body "file://$1" | jq '.'
}
{{- else -}}
# aws functions omitted
{{- end }}

{{ if lookPath "kubectl" -}}
node2instance() {
    kubectl get node "$1" -o jsonpath="{.spec.providerID}" | cut -d "/" -f 5
}

pods_ready() {
    namespace="$1"
    label_selector="$2"

    while IFS="|" read -r pod node statuses; do
        [[ $statuses =~ false ]] && echo "$pod in $namespace has unready containers on instance $node"
    done < <(
        kubectl \
            -n "$namespace" \
            get pod \
            -l "$label_selector" \
            -o jsonpath='{range .items[*]}{.metadata.name}|{.spec.nodeName}|{.status.containerStatuses[*].ready}{"\n"}{end}'
    )
}

kjq() {
    local spec="$1"
    shift
    kubectl get -o json $@ | jq "$spec"
}
{{- else -}}
# kubectl functions omitted
{{- end }}

{{ if lookPath "chezmoi" -}}
cmet() {
    chezmoi execute-template $@
}
cmetf() {
    cmet "$@" | shfmt -d -s -bn -i 4 -ci -sr
}
{{- else -}}
# chezmoi functions omitted
{{- end }}

{{ if lookPath "asdf" -}}
asdf_cleanup() {
    for plugin in $(asdf plugin list); do
        for v in $(asdf list "$plugin" | rg -v '\*'); do
            asdf uninstall "$plugin" "$v"
        done
    done
}
{{- else -}}
# asdf functions omitted
{{- end }}

{{ if lookPath "wg" -}}
wg-restart() {
    local if="$1"
    sudo zsh -c "wg syncconf $if <(wg-quick strip $if)"
}
{{- else -}}
# wg functions omitted
{{- end }}

{{ if lookPath "docker" -}}
clean_docker_images() {
    docker rmi --force $(docker images -qa)

    if [ $1 == "--deep" ]; then
        docker system prune --all --force --volumes
    fi
}
{{- else -}}
# docker functions omitted
{{- end }}
