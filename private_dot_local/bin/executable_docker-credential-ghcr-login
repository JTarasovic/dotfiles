#!/usr/bin/env bash

# Allows doing something like:
# {
#         "credHelpers": {
#         "ghcr.io": "ghcr-login"
#         }
# }
#
# requires gh cli and gh auth to be configured with `write:packages`
# e.g. `gh auth refresh --scopes write:packages`

set -euo pipefail

TAG="ghcr-login"

function build_response() {
    local server_url="$1"
    local status
    local user
    local token

    status=$(gh auth status --show-token 2>&1)
    user=$(echo "$status" | grep "Logged in to github.com " | sed 's/.*Logged in to github.com account \(.*\) (.*)/\1/g')
    token=$(echo "$status" | grep "Token: " | sed 's/.*Token: \(.*\)/\1/g')

    jq \
        --null-input \
        --compact-output \
        --monochrome-output \
        --raw-output \
        --arg server_url "$server_url" \
        --arg user "$user" \
        --arg token "$token" \
        '{"ServerURL":$server_url,"Username":$user,"Secret":$token}'
}

case "${1-}" in
get | GET | list | LIST)
    # we'll get EOF and read will exit non-zero. _le sigh_
    SECONDS=0
    read -r server || true
    printf "running ghcr-login for %s" "$server" | systemd-cat -t "$TAG"
    build_response "$server"
    printf "finished in %s seconds" "$SECONDS" | systemd-cat -t "$TAG"
    ;;
store | STORE | erase | ERASE)
    read -r server || true
    printf "unsupported request to %s for %s" "$1" "$server" | systemd-cat -t "$TAG"
    exit 0
    ;;
*)
    exit 1
    ;;
esac
